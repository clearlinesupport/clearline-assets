/*
    File: quote-calculator.js
    Description: Interactive workstation quote form.
    Author: Generated by OpenAI Codex on 2025-06-07
    License: Â© 2025 Clearline Field Systems. All rights reserved.
*/

const BASE_PRICES = {
    barebones: 400,
    value: 475,
    latest: 550
};

const CUSTOM_PART_PRICES = {
    cpu: { 'i5-8500': 50, 'i5-9500': 75, 'i5-10500': 100 },
    ram: { '8': 30, '16': 60, '32': 120 },
    ssd: { '256': 40, '512': 80, '1000': 150 }
};

const LABOR_COST_PER_UNIT = 100;

function getUnitPrice(buildType, customParts = {}) {
    if (['barebones', 'value', 'latest'].includes(buildType)) {
        return BASE_PRICES[buildType] + LABOR_COST_PER_UNIT;
    }
    const cpuPrice = CUSTOM_PART_PRICES.cpu[customParts.cpu] || 0;
    const ramPrice = CUSTOM_PART_PRICES.ram[customParts.ram] || 0;
    const ssdPrice = CUSTOM_PART_PRICES.ssd[customParts.ssd] || 0;
    return cpuPrice + ramPrice + ssdPrice + LABOR_COST_PER_UNIT;
}

function initQuoteCalculator() {
    const container = document.getElementById('workstation-quote');
    if (!container) {
        return;
    }
    container.innerHTML = buildMarkup();
    bindEvents(container);
}

function buildMarkup() {
    return `
        <div class="quote__form" id="step2">
            <label for="buildType">Build Type</label>
            <select id="buildType">
                <option value="barebones">Barebones</option>
                <option value="value">Value</option>
                <option value="latest">Latest Gen</option>
                <option value="custom">Custom</option>
            </select>
            <div id="customOptions" style="display:none">
                <label for="cpu">CPU</label>
                <select id="cpu">
                    <option value="i5-8500">Intel i5-8500 (+$50)</option>
                    <option value="i5-9500">Intel i5-9500 (+$75)</option>
                    <option value="i5-10500">Intel i5-10500 (+$100)</option>
                </select>
                <label for="ram">RAM</label>
                <select id="ram">
                    <option value="8">8 GB (+$30)</option>
                    <option value="16">16 GB (+$60)</option>
                    <option value="32">32 GB (+$120)</option>
                </select>
                <label for="ssd">SSD</label>
                <select id="ssd">
                    <option value="256">256 GB (+$40)</option>
                    <option value="512">512 GB (+$80)</option>
                    <option value="1000">1 TB (+$150)</option>
                </select>
            </div>
            <div class="quote__row">
                <label for="qty">Quantity</label>
                <input type="number" id="qty" min="1" value="1">
            </div>
            <p id="unitPriceDisplay">Unit Price: $0.00</p>
            <button type="button" id="addBtn" class="btn">Add to Quote</button>
        </div>
        <table id="quoteTable" class="quote__table">
            <thead>
                <tr><th>Qty</th><th>Build</th><th>Unit</th><th>Total</th></tr>
            </thead>
            <tbody></tbody>
            <tfoot>
                <tr><td colspan="3">Grand Total</td><td id="grandTotal">$0.00</td></tr>
            </tfoot>
        </table>
    `;
}

function bindEvents(root) {
    const buildSelect = root.querySelector('#buildType');
    const cpuSelect = root.querySelector('#cpu');
    const ramSelect = root.querySelector('#ram');
    const ssdSelect = root.querySelector('#ssd');
    const qtyInput = root.querySelector('#qty');
    const customOpts = root.querySelector('#customOptions');
    const addBtn = root.querySelector('#addBtn');
    const unitPriceDisplay = root.querySelector('#unitPriceDisplay');
    const tableBody = root.querySelector('#quoteTable tbody');
    const grandCell = root.querySelector('#grandTotal');

    function updateUnit() {
        const buildType = buildSelect.value;
        const unit = getUnitPrice(buildType, {
            cpu: cpuSelect.value,
            ram: ramSelect.value,
            ssd: ssdSelect.value
        });
        unitPriceDisplay.textContent = `Unit Price: $${unit.toFixed(2)}`;
    }

    function toggleCustom() {
        customOpts.style.display = buildSelect.value === 'custom' ? 'block' : 'none';
        updateUnit();
    }

    function addLine() {
        const qty = Number(qtyInput.value);
        if (!Number.isInteger(qty) || qty < 1) {
            return;
        }
        const buildType = buildSelect.value;
        const unit = getUnitPrice(buildType, {
            cpu: cpuSelect.value,
            ram: ramSelect.value,
            ssd: ssdSelect.value
        });
        const total = qty * unit;
        const row = document.createElement('tr');
        row.innerHTML = `<td>${qty}</td><td>${buildType}</td><td>$${unit.toFixed(2)}</td><td>$${total.toFixed(2)}</td>`;
        tableBody.appendChild(row);
        updateGrandTotal();
    }

    function updateGrandTotal() {
        const rows = Array.from(tableBody.querySelectorAll('tr'));
        const sum = rows.reduce((acc, row) => acc + Number(row.lastElementChild.textContent.replace('$','')), 0);
        grandCell.textContent = `$${sum.toFixed(2)}`;
    }

    buildSelect.addEventListener('change', toggleCustom);
    cpuSelect.addEventListener('change', updateUnit);
    ramSelect.addEventListener('change', updateUnit);
    ssdSelect.addEventListener('change', updateUnit);
    qtyInput.addEventListener('input', updateUnit);
    addBtn.addEventListener('click', addLine);

    toggleCustom();
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = { getUnitPrice, initQuoteCalculator };
}

if (typeof window !== 'undefined') {
    window.addEventListener('DOMContentLoaded', initQuoteCalculator);
}
